{"version":3,"sources":["constants/mega.sena.constants.js","functions/math.utils.js","components/Home.jsx","components/Sobre.jsx","App.js","serviceWorker.js","index.js"],"names":["CHOICES_MIN","CHOICES_MAX","MEGA_SENA_MIN","MEGA_SENA_MAX","MEGA_SENA_VALUE","factorial","n","binomial","p","maxBetValue","Home","state","value","toFixed","bets","fixedInput","numbers","isValid","showOptions","handleFixedInputChange","evt","input","target","validFixedInput","validateFixedInput","fixedNumbers","split","map","Number","setState","length","isDigitOrSpace","reduce","a","b","Set","size","className","id","placeholder","onChange","handleShowOptions","generate","preventDefault","possibleNumbers","j","indexOf","push","choice","singleCost","currentNumberOfBets","Math","floor","i","choices","Object","create","randomIndex","random","splice","sort","distinctBets","cost","showTable","totalCost","bet","scope","key","join","valueDisplay","align","this","min","max","type","step","required","onClick","Component","str","test","Sobre","href","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAAaA,G,YAAc,GACdC,EAAc,GAEdC,EAAgB,EAChBC,EAAgB,GAGhBC,EAAkB,ICP3BC,EAAY,SAAZA,EAAYC,GACd,OAAIA,EAAI,EACC,EAEFA,EAAID,EAAUC,EAAI,IAOZC,EAJA,SAACD,EAAGE,GACjB,OAAOH,EAAUC,GAAKD,EAAUG,GAAKH,EAAUC,EAAIE,ICS/CC,EACHF,EAASN,EAAaD,GACrBI,GACCD,EAAgBD,EAAgB,GACnCD,EAEIS,E,2MACJC,MAAQ,CACNC,MAAOR,EAAgBS,QAAQ,GAC/BC,KAAM,GACNC,WAAY,CAAEC,QAAS,GAAIC,SAAS,GACpCC,aAAa,G,EAGfC,uBAAyB,SAACC,GACxB,IAAIC,EAAQD,EAAIE,OAAOV,MAEnBW,EAAkB,EAAKC,mBAAmBH,GAE1CV,EAAQ,EAAKA,MAGjB,GAFAA,EAAMI,WAAWE,QAAUM,EAEvBA,EAAiB,CACnB,IAAIE,EAAeJ,EAAMK,MAAM,KAAKC,IAAIC,QACxCjB,EAAMI,WAAWC,QAAUS,OAE3Bd,EAAMI,WAAWC,QAAU,GAG7B,EAAKa,SAASlB,I,EAGhBa,mBAAqB,SAACH,GACpB,IAAIL,EAAUK,EAAMK,MAAM,KAE1B,QAAuB,IAAnBV,EAAQc,QAAgBd,EAAQc,OAAS,OAK5Bd,EAAQW,IAAII,GAAgBC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,GAAKC,KAAG,QAKtElB,EAAUA,EAAQW,IAAIC,SAInBD,KAAI,SAACrB,GAAD,OAAOA,GAAKH,GAAiBG,GAAKJ,KACtC8B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,GAAKC,MAMrB,IAAIC,IAAInB,GAASoB,OAASpB,EAAQc,U,EAOxCZ,YAAc,WACZ,GAAK,EAAKP,MAAMO,YAGhB,OACE,yBAAKmB,UAAU,OACb,yBAAKA,UAAU,UACb,iFACmD,IACjD,2BACEC,GAAG,cACHC,YAAY,UACZC,SAAU,EAAKrB,uBACfkB,UAAW,EAAK1B,MAAMI,WAAWE,QAAU,GAAK,sB,EAQ5DwB,kBAAoB,WAClB,IAAI9B,EAAQ,EAAKA,MACjBA,EAAMO,aAAeP,EAAMO,YAC3B,EAAKW,SAASlB,I,EAGhB+B,SAAW,SAACtB,GACVA,EAAIuB,iBAKJ,IAJA,IAAI/B,EAAQ,EAAKD,MAAMC,MAGnBgC,EAAkB,GACbC,EAAI3C,EAAe2C,GAAK1C,EAAe0C,IAE1C,EAAKlC,MAAMI,WAAWC,QAAQ8B,QAAQD,GAAK,GAC7CD,EAAgBG,KAAKF,GAMzB,IAFA,IAAI/B,EAAO,GAGLkC,EAAS/C,EACb+C,GAAUhD,GAAeY,GAAS,EAClCoC,IACA,CAOA,IANA,IAAIC,EAAa1C,EAASyC,EAAQhD,GAAeI,EAE7C8C,EAAsBC,KAAKC,MAAMxC,EAAQqC,GAKvCI,EAAI,EACRA,EAAIH,GAAuBN,EAAgBd,OAAS9B,EACpDqD,IACA,CAEA,IADA,IAAIC,EAAUC,OAAOC,OAAO,EAAK7C,MAAMI,WAAWC,SAC3CsC,EAAQxB,OAASkB,GAAUJ,EAAgBd,OAAS,GAAG,CAE5D,IAAI2B,EAAcN,KAAKC,MAAMD,KAAKO,SAAWd,EAAgBd,QACzDkB,EAASJ,EAAgBa,GAC7BH,EAAQP,KAAKC,GAIbJ,EAAgBe,OAAOF,EAAa,GAItCH,EAAQM,MAAK,SAAC3B,EAAGC,GAAJ,OAAUD,EAAIC,KAE3B,IAAI2B,EAAetD,EAASyC,EAAQhD,GAEpCc,EAAKiC,KAAK,CACRO,QAASA,EACTQ,KAAMb,EACNY,aAAcA,IAKlBjD,GADkBsC,EAAsBD,EAI1C,IAAItC,EAAQ,EAAKA,MACjBA,EAAMG,KAAOA,EACb,EAAKe,SAASlB,I,EAGhBoD,UAAY,WACV,GAA+B,IAA3B,EAAKpD,MAAMG,KAAKgB,OAApB,CAIA,IAAIkC,EAAY,EAAKrD,MAAMG,KACxBa,KAAI,SAACsC,GAAD,OAASA,EAAIH,QACjB9B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAEvB2B,EAAe,EAAKlD,MAAMG,KAC3Ba,KAAI,SAACsC,GAAD,OAASA,EAAIJ,gBACjB7B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAE3B,OACE,yBAAKG,UAAU,eACb,2BAAOA,UAAU,kEACf,2BAAOA,UAAU,cACf,4BACE,wBAAIA,UAAU,eAAe6B,MAAM,OAAnC,QAGA,wBAAI7B,UAAU,eAAe6B,MAAM,OAAnC,WAGA,+CACA,wBAAI7B,UAAU,eAAe6B,MAAM,OAAnC,WAKJ,+BACG,EAAKvD,MAAMG,KAAKa,KAAI,SAACsC,GAAD,OACnB,wBAAIE,IAAKF,EAAIX,SACX,4BAAKW,EAAIX,QAAQc,KAAK,OACtB,4BAAKH,EAAIX,QAAQxB,QACjB,4BAAKmC,EAAIJ,cACT,4BAAKQ,EAAaJ,EAAIH,YAI5B,+BACE,4BACE,6BACA,qCACA,4BAAKD,GACL,4BAAKQ,EAAaL,U,wEAQpB,IAAD,OACP,OACE,0BAAM3B,UAAU,aACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAASiC,MAAM,UAC5B,mDAGJ,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,SAASiC,MAAM,UAC5B,4DACiC,IAC/B,2BACEhC,GAAG,cACHE,SAAU,SAACpB,GAAD,OAAS,EAAKS,SAAS,CAAEjB,MAAOQ,EAAIE,OAAOV,SACrDA,MAAO2D,KAAK5D,MAAMC,MAClB4D,IAAKpE,EACLqE,IAAKhE,EACLiE,KAAK,SACLC,KAAK,OACLC,UAAQ,OAKhB,yBAAKvC,UAAU,MAAMiC,MAAM,UACzB,yBAAKjC,UAAU,UACb,4BAAQwC,QAASN,KAAK7B,SAAUL,UAAU,mBAA1C,WAMHkC,KAAKR,YAEN,yBAAK1B,UAAU,MAAMiC,MAAM,UACzB,yBAAKjC,UAAU,UACb,4BACEwC,QAASN,KAAK9B,kBACdJ,UAAU,oBACVqC,KAAK,UAHP,kBAUHH,KAAKrD,mB,GAxPK4D,aA8PfT,EAAe,SAACzD,GAClB,MAAO,MAAQA,EAAMC,QAAQ,IAG3BkB,EAAiB,SAACgD,GAAD,MAAS,aAAaC,KAAKD,IAEjCrE,ICtQAuE,E,2MAlBbtE,MAAQ,G,wEAEN,OACE,yBAAK0B,UAAU,aACb,qCACA,uHAIA,+EAC8C,IAC5C,uBAAG6C,KAAK,iDAAR,QAFF,U,GAVYJ,a,eCsCLK,MAlCf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,yBAAK9C,UAAU,+CACb,yBAAKA,UAAU,2BAA2BC,GAAG,0BAC3C,wBAAID,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAM+C,GAAG,IAAI/C,UAAU,YAAvB,cAIF,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAM+C,GAAG,SAAS/C,UAAU,YAA5B,aAQR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgD,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCpBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2e22bee0.chunk.js","sourcesContent":["export const CHOICES_MIN = 6;\nexport const CHOICES_MAX = 15;\n\nexport const MEGA_SENA_MIN = 1;\nexport const MEGA_SENA_MAX = 60;\n\n// TODO fetch from some API\nexport const MEGA_SENA_VALUE = 4.5; // R$ 4,50\n","var factorial = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nvar binomial = (n, p) => {\n  return factorial(n) / factorial(p) / factorial(n - p);\n};\n\nexport default binomial;\n","import React, { Component } from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./Home.css\";\n\nimport {\n  CHOICES_MIN,\n  CHOICES_MAX,\n  MEGA_SENA_MIN,\n  MEGA_SENA_MAX,\n  MEGA_SENA_VALUE,\n} from \"../constants/mega.sena.constants\";\n\nimport binomial from \"../functions/math.utils\";\n\n// For now, we do not allow very large values for bets, only about 100k.\nconst maxBetValue =\n  (binomial(CHOICES_MAX, CHOICES_MIN) *\n    MEGA_SENA_VALUE *\n    (MEGA_SENA_MAX - MEGA_SENA_MIN + 1)) /\n  CHOICES_MAX;\n\nclass Home extends Component {\n  state = {\n    value: MEGA_SENA_VALUE.toFixed(2),\n    bets: [],\n    fixedInput: { numbers: [], isValid: true },\n    showOptions: false,\n  };\n\n  handleFixedInputChange = (evt) => {\n    let input = evt.target.value;\n\n    let validFixedInput = this.validateFixedInput(input);\n\n    let state = this.state;\n    state.fixedInput.isValid = validFixedInput;\n\n    if (validFixedInput) {\n      let fixedNumbers = input.split(\",\").map(Number);\n      state.fixedInput.numbers = fixedNumbers;\n    } else {\n      state.fixedInput.numbers = [];\n    }\n\n    this.setState(state);\n  };\n\n  validateFixedInput = (input) => {\n    let numbers = input.split(\",\");\n\n    if (numbers.length === 0 || numbers.length > 5) {\n      return false;\n    }\n\n    // Fixed numbers must by all digits only\n    let digitsOnly = numbers.map(isDigitOrSpace).reduce((a, b) => a && b, true);\n    if (!digitsOnly) {\n      return false;\n    }\n\n    numbers = numbers.map(Number);\n\n    // 1 <= n <= 60\n    let betweenLimits = numbers\n      .map((n) => n <= MEGA_SENA_MAX && n >= MEGA_SENA_MIN)\n      .reduce((a, b) => a && b);\n    if (!betweenLimits) {\n      return false;\n    }\n\n    // Duplications\n    if (new Set(numbers).size !== numbers.length) {\n      return false;\n    }\n\n    return true;\n  };\n\n  showOptions = () => {\n    if (!this.state.showOptions) {\n      return;\n    }\n    return (\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <p>\n            Incluir n√∫meros fixos para aparecer nas apostas?{\" \"}\n            <input\n              id=\"fixed-input\"\n              placeholder=\"1, 2, 3\"\n              onChange={this.handleFixedInputChange}\n              className={this.state.fixedInput.isValid ? \"\" : \"input-invalid\"}\n            ></input>\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  handleShowOptions = () => {\n    let state = this.state;\n    state.showOptions = !state.showOptions;\n    this.setState(state);\n  };\n\n  generate = (evt) => {\n    evt.preventDefault();\n    let value = this.state.value;\n\n    // Pick from 1 to 60\n    let possibleNumbers = [];\n    for (let j = MEGA_SENA_MIN; j <= MEGA_SENA_MAX; j++) {\n      // If the number is already on the fixed input, we do not include it again.\n      if (this.state.fixedInput.numbers.indexOf(j) < 0) {\n        possibleNumbers.push(j);\n      }\n    }\n\n    let bets = [];\n    // j = 6 means a 6 numbers bet, j = 7 means 7 numbers bet.\n    for (\n      let choice = CHOICES_MAX;\n      choice >= CHOICES_MIN && value >= 0;\n      choice--\n    ) {\n      let singleCost = binomial(choice, CHOICES_MIN) * MEGA_SENA_VALUE;\n\n      let currentNumberOfBets = Math.floor(value / singleCost);\n\n      // i = 2 means 2 bets of 6 numbers (or 7, or whatever `choice` is)\n      // We also restrict to not generate bets smaller than 6 choices.\n      for (\n        let i = 0;\n        i < currentNumberOfBets && possibleNumbers.length > CHOICES_MIN;\n        i++\n      ) {\n        let choices = Object.create(this.state.fixedInput.numbers);\n        while (choices.length < choice && possibleNumbers.length > 0) {\n          // Pick a random number\n          let randomIndex = Math.floor(Math.random() * possibleNumbers.length);\n          let choice = possibleNumbers[randomIndex];\n          choices.push(choice);\n\n          // Remove the chosen numbers. This prevents intersections.\n          // TODO allow some clever intersections.\n          possibleNumbers.splice(randomIndex, 1);\n        }\n\n        // Better presentation of numbers. Sort asc.\n        choices.sort((a, b) => a - b);\n\n        let distinctBets = binomial(choice, CHOICES_MIN);\n\n        bets.push({\n          choices: choices,\n          cost: singleCost,\n          distinctBets: distinctBets,\n        });\n      }\n\n      let currentCost = currentNumberOfBets * singleCost;\n      value -= currentCost;\n    }\n\n    let state = this.state;\n    state.bets = bets;\n    this.setState(state);\n  };\n\n  showTable = () => {\n    if (this.state.bets.length === 0) {\n      return;\n    }\n\n    let totalCost = this.state.bets\n      .map((bet) => bet.cost)\n      .reduce((a, b) => a + b, 0);\n\n    let distinctBets = this.state.bets\n      .map((bet) => bet.distinctBets)\n      .reduce((a, b) => a + b, 0);\n\n    return (\n      <div className=\"text-center\">\n        <table className=\"table table-striped table-bordered table-hover table-condensed\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th className=\"align-middle\" scope=\"col\">\n                Jogo\n              </th>\n              <th className=\"align-middle\" scope=\"col\">\n                Tamanho\n              </th>\n              <th>Jogos distintos</th>\n              <th className=\"align-middle\" scope=\"col\">\n                Custo\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.bets.map((bet) => (\n              <tr key={bet.choices}>\n                <td>{bet.choices.join(\", \")}</td>\n                <td>{bet.choices.length}</td>\n                <td>{bet.distinctBets}</td>\n                <td>{valueDisplay(bet.cost)}</td>\n              </tr>\n            ))}\n          </tbody>\n          <tfoot>\n            <tr>\n              <th></th>\n              <th>Total</th>\n              <th>{distinctBets}</th>\n              <th>{valueDisplay(totalCost)}</th>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <form className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\" align=\"center\">\n            <h1>Gerador Mega Sena</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\" align=\"center\">\n            <p>\n              Digite o valor da vaquinha: R${\" \"}\n              <input\n                id=\"value-input\"\n                onChange={(evt) => this.setState({ value: evt.target.value })}\n                value={this.state.value}\n                min={MEGA_SENA_VALUE}\n                max={maxBetValue}\n                type=\"number\"\n                step=\"0.01\"\n                required\n              ></input>\n            </p>\n          </div>\n        </div>\n        <div className=\"row\" align=\"center\">\n          <div className=\"col-12\">\n            <button onClick={this.generate} className=\"btn btn-primary\">\n              Gerar\n            </button>\n          </div>\n        </div>\n\n        {this.showTable()}\n\n        <div className=\"row\" align=\"center\">\n          <div className=\"col-12\">\n            <button\n              onClick={this.handleShowOptions}\n              className=\"btn btn-secondary\"\n              type=\"button\"\n            >\n              Op√ß√µes\n            </button>\n          </div>\n        </div>\n\n        {this.showOptions()}\n      </form>\n    );\n  }\n}\n\nvar valueDisplay = (value) => {\n  return \"R$ \" + value.toFixed(2);\n};\n\nvar isDigitOrSpace = (str) => /^[0-9\\s]*$/.test(str);\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass Sobre extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Sobre</h1>\n        <p>\n          App despretencioso para facilitar a gera√ß√£o de jogos da mega-sena\n          entre vaquinhas.\n        </p>\n        <p>\n          O site √© open-source e voc√™ pode contribuir{\" \"}\n          <a href=\"https://github.com/campos20/mega-sena-gerador\">aqui</a>.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Sobre;\n","import React from \"react\";\nimport Home from \"./components/Home\";\nimport Sobre from \"./components/Sobre\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <Link to=\"/\" className=\"nav-link\">\n                  In√≠cio\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to=\"/sobre\" className=\"nav-link\">\n                  Sobre\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n\n        <Switch>\n          <Route path=\"/sobre\">\n            <Sobre />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}