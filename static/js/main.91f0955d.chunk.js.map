{"version":3,"sources":["constants/mega.sena.constants.js","functions/math.utils.js","components/Home.jsx","components/Sobre.jsx","App.js","serviceWorker.js","index.js"],"names":["CHOICES_MIN","CHOICES_MAX","MEGA_SENA_MIN","MEGA_SENA_MAX","MEGA_SENA_VALUE","factorial","n","binomial","p","maxBetValue","Home","props","handleValueChange","evt","value","target","test","Number","state","setState","generate","possibleNumbers","j","push","bets","singleCost","currentNumberOfBets","Math","floor","i","length","choices","k","randomIndex","random","choice","splice","sort","a","b","cost","className","align","id","onChange","this","onClick","scope","map","bet","key","join","valueDisplay","reduce","Component","toFixed","Sobre","App","href","src","width","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91f0955d.chunk.js","sourcesContent":["export const CHOICES_MIN = 6;\nexport const CHOICES_MAX = 15;\n\nexport const MEGA_SENA_MIN = 1;\nexport const MEGA_SENA_MAX = 60;\n\n// TODO fetch from some API\nexport const MEGA_SENA_VALUE = 4.5; // R$ 4,50\n","var factorial = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nvar binomial = (n, p) => {\n  return factorial(n) / factorial(p) / factorial(n - p);\n};\n\nexport default binomial;\n","import React, { Component } from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./Home.css\";\n\nimport {\n  CHOICES_MIN,\n  CHOICES_MAX,\n  MEGA_SENA_MIN,\n  MEGA_SENA_MAX,\n  MEGA_SENA_VALUE\n} from \"../constants/mega.sena.constants\";\n\nimport binomial from \"../functions/math.utils\";\n\n// For now, we do not allow very large values for bets, only about 100k.\nconst maxBetValue =\n  (binomial(CHOICES_MAX, CHOICES_MIN) *\n    MEGA_SENA_VALUE *\n    (MEGA_SENA_MAX - MEGA_SENA_MIN + 1)) /\n  CHOICES_MAX;\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { value: 0, bets: [] };\n  }\n\n  handleValueChange = evt => {\n    let value = evt.target.value;\n\n    // Digits only\n    if (/\\D/.test(value)) {\n      return;\n    }\n\n    value = Number(value);\n\n    if (value > maxBetValue) {\n      return;\n    }\n\n    let state = this.state;\n    state.value = Number(value);\n    this.setState(state);\n  };\n\n  generate = () => {\n    let value = this.state.value;\n\n    // Pick from 1 to 60\n    let possibleNumbers = [];\n    for (let j = MEGA_SENA_MIN; j <= MEGA_SENA_MAX; j++) {\n      possibleNumbers.push(j);\n    }\n\n    let bets = [];\n    // j = 6 means a 6 numbers bet, j = 7 means 7 numbers bet.\n    for (let j = CHOICES_MAX; j >= CHOICES_MIN && value >= 0; j--) {\n      let singleCost = binomial(j, CHOICES_MIN) * MEGA_SENA_VALUE;\n\n      let currentNumberOfBets = Math.floor(value / singleCost);\n\n      // i = 2 means 2 bets of 6 numbers (or 7, or whatever j is)\n      // We also restrict to not generate bets smaller than 6 choices.\n      for (\n        let i = 0;\n        i < currentNumberOfBets && possibleNumbers.length > CHOICES_MIN;\n        i++\n      ) {\n        let choices = [];\n        for (let k = 0; k < j && possibleNumbers.length > 0; k++) {\n          // Pick a random number\n          let randomIndex = Math.floor(Math.random() * possibleNumbers.length);\n          let choice = possibleNumbers[randomIndex];\n          choices.push(choice);\n\n          // Remove the chosen numbers. This prevents intersections.\n          // TODO allow some clever intersections.\n          possibleNumbers.splice(randomIndex, 1);\n        }\n\n        // Better presentation of numbers. Sort asc.\n        choices.sort((a, b) => a - b);\n\n        bets.push({ choices: choices, cost: singleCost });\n      }\n\n      let currentCost = currentNumberOfBets * singleCost;\n      value -= currentCost;\n    }\n\n    let state = this.state;\n    state.bets = bets;\n    this.setState(state);\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\" align=\"center\">\n            <h1>Gerador Mega Sena</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\" align=\"center\">\n            <p>Digite o valor da vaquinha</p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\" align=\"center\">\n            <input\n              id=\"value-input\"\n              onChange={this.handleValueChange}\n              value={this.state.value}\n            ></input>\n          </div>\n        </div>\n        <div className=\"row\" align=\"center\">\n          <div className=\"col-12\">\n            <button onClick={this.generate} className=\"btn btn-primary\">\n              Gerar\n            </button>\n          </div>\n        </div>\n\n        <div className=\"text-center\">\n          <table className=\"table table-striped table-bordered table-hover table-condensed\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th className=\"align-middle\" scope=\"col\">\n                  Tamanho\n                </th>\n                <th className=\"align-middle\" scope=\"col\">\n                  Jogo\n                </th>\n                <th className=\"align-middle\" scope=\"col\">\n                  Custo\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.bets.map(bet => (\n                <tr key={bet.choices}>\n                  <td>{bet.choices.length}</td>\n                  <td>{bet.choices.join(\", \")}</td>\n                  <td>{valueDisplay(bet.cost)}</td>\n                </tr>\n              ))}\n            </tbody>\n            <tfoot>\n              <tr>\n                <th></th>\n                <th>Total</th>\n                <th>\n                  {valueDisplay(\n                    this.state.bets\n                      .map(bet => bet.cost)\n                      .reduce((a, b) => a + b, 0)\n                  )}\n                </th>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nvar valueDisplay = value => {\n  return \"R$ \" + value.toFixed(2);\n};\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass Sobre extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Sobre</h1>\n        <p>\n          App despretencioso para facilitar a geração de jogos da mega-sena\n          entre vaquinhas.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Sobre;\n","import React from \"react\";\nimport Home from \"./components/Home\";\nimport Sobre from \"./components/Sobre\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n          <a className=\"navbar-brand\" href=\"/\">\n            <img src=\"MamaeBebe.png\" width=\"75\" alt=\"\" />\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/\">\n                  Início <span className=\"sr-only\">(current)</span>\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/sobre\">\n                  Sobre\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n\n        <Switch>\n          <Route path=\"/sobre\">\n            <Sobre />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}